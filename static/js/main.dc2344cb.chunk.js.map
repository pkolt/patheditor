{"version":3,"sources":["components/SearchForm.js","components/List.js","components/Map.js","util.js","App.js","index.js"],"names":["React","memo","props","value","onChangeValue","onSubmit","e","preventDefault","className","type","placeholder","onChange","target","Item","index","item","id","title","onClick","onRemove","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","href","items","onDragEnd","droppableId","droppableProps","map","key","centerPoint","onChangeItemPoint","mState","center","zoom","controls","plGeometry","point","query","ns","load","state","width","height","defaultGeometry","options","draggable","properties","balloonContentHeader","event","get","geometry","getCoordinates","balloonCloseButton","strokeColor","strokeWidth","searchPoint","a","async","fetch","response","json","data","geoObjects","GeoObjectCollection","featureMember","points","obj","GeoObject","Point","pos","split","parseFloat","reverse","console","error","moscowPoint","getItemsLocalStorage","localStorage","getItem","JSON","parse","setItemsLocalStorage","setItem","stringify","App","useState","searchValue","setSearchValue","activeItemId","setActiveItemId","setItems","useMemo","activeItem","filter","firstItem","useEffect","onRemoveItem","useCallback","prevItems","onChangeSearchValue","uuid","onChangeActiveItem","result","destination","source","list","startIndex","endIndex","Array","from","splice","removed","reorder","SearchForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc2344cb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PointSearch = (props) => {\n    const {value, onChangeValue, onSubmit} = props;\n    return <form onSubmit={(e) => {\n                    e.preventDefault();\n                    onSubmit();\n                }}>\n               <input className=\"form-control\" \n                      type=\"text\" \n                      placeholder=\"Введите новую точку маршрута и нажмите Enter\" \n                      value={value}\n                      onChange={(e) => onChangeValue(e.target.value)}/>\n           </form>;\n}\nPointSearch.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChangeValue: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n};\n\nexport default React.memo(PointSearch);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\n\nlet Item = (props) => {\n    const {index, item: {id, title}, onClick, onRemove} = props;\n    return <Draggable draggableId={id} index={index}>\n        {(provided) => (\n            <li className=\"list-group-item\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                <div className=\"d-flex w-100 justify-content-between\">\n                    <a href=\".\" onClick={(e) => {\n                        e.preventDefault();\n                        onClick(id);\n                    }}>{title}</a>\n\n                    <button type=\"button\" \n                            className=\"btn btn-outline-danger btn-sm\" \n                            onClick={() => onRemove(id)}>Удалить</button>\n                </div>\n            </li>\n        )}\n    </Draggable>\n};\n\nItem.propTypes = {\n    item: PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string\n    }).isRequired,\n    onClick: PropTypes.func.isRequired,\n    onRemove: PropTypes.func.isRequired\n};\n\nItem = React.memo(Item);\n\nconst List = (props) => {\n    const {items, onClick, onRemove, onDragEnd} = props;\n    return <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"list\">\n        {(provided) => (\n            <ul className=\"list-group mt-2\" ref={provided.innerRef} {...provided.droppableProps}>\n                {items.map((item, index) => (\n                    <Item key={item.id} index={index} item={item} onClick={onClick} onRemove={onRemove}/>\n                ))}\n                {provided.placeholder}\n            </ul>\n        )}\n        </Droppable>\n    </DragDropContext>\n}\n\nList.propTypes = {\n    items: PropTypes.array.isRequired,\n    onClick: PropTypes.func.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    onDragEnd: PropTypes.func.isRequired\n};\n\nexport default React.memo(List);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {YMaps, Map as YMap, Placemark, Polyline} from 'react-yandex-maps';\n\nconst Map = (props) => {\n    const {centerPoint, items, onChangeItemPoint} = props;\n    const ymQuery = {\n        ns: 'use-load-option',\n        load: 'Map,Placemark,control.ZoomControl,geoObject.addon.balloon',\n    };\n    const mState = {\n        center: centerPoint, \n        zoom: 10, \n        controls: ['zoomControl']\n    };\n    const plGeometry = items.map(item => item.point);\n\n    return <YMaps query={ymQuery}>\n                <YMap state={mState} width=\"\" height={600}>\n                    {items.map((item) => <Placemark\n                                            key={item.id}\n                                            defaultGeometry={item.point}\n                                            options={{draggable: true}}\n                                            properties={{balloonContentHeader: item.title}}\n                                            onDragEnd={(event) => {\n                                                const point = event.get('target').geometry.getCoordinates();\n                                                onChangeItemPoint(item.id, point);\n                                            }}\n                                        />\n                    )}\n                    <Polyline\n                        geometry={plGeometry}\n                        options={{\n                            balloonCloseButton: false,\n                            strokeColor: '#ff0000',\n                            strokeWidth: 2\n                        }}\n                        />\n                </YMap>\n    </YMaps>;\n}\n\nMap.propTypes = {\n    items: PropTypes.array.isRequired,\n    onChangeItemPoint: PropTypes.func.isRequired,\n    centerPoint: PropTypes.array.isRequired\n};\n\nexport default React.memo(Map);","const apikey = 'b5ca0b9b-9f4b-4cbf-bcbf-f562a8297253';\n\nexport const searchPoint = async (value) => {\n    try {\n        const response = await fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=${apikey}&results=1&format=json&geocode=${value}`);\n        const data = await response.json();\n        const geoObjects = data.response.GeoObjectCollection.featureMember;\n        const points = geoObjects.map((obj) => {\n          const pos = obj.GeoObject.Point.pos;\n          const geometry = pos.split(' ').map(parseFloat).reverse();\n          return geometry;\n        });\n        return points[0];\n    } catch(error) {\n        console.error(error);\n    }\n}","import React, {useState, useMemo, useEffect, useCallback} from 'react';\nimport uuid from 'uuid/v1';\nimport SearchForm from './components/SearchForm';\nimport List from './components/List';\nimport Map from './components/Map';\nimport {searchPoint} from './util';\n\nconst moscowPoint = [55.75, 37.57];\nconst localStorageKey = 'path-editor';\nconst getItemsLocalStorage = () => localStorage.getItem(localStorageKey) && JSON.parse(localStorage.getItem(localStorageKey));\nconst setItemsLocalStorage = (value) => localStorage.setItem(localStorageKey, JSON.stringify(value));\n\nfunction App() {\n  const [searchValue, setSearchValue] = useState('');\n  const [activeItemId, setActiveItemId] = useState('');\n  const [items, setItems] = useState(getItemsLocalStorage());\n\n  const centerPoint = useMemo(() => {\n    const activeItem = items.filter(item => item.id === activeItemId)[0];\n    const firstItem = items[0];\n    return (activeItem && activeItem.point) || (firstItem && firstItem.point) || moscowPoint;\n  }, [items, activeItemId]);\n\n  useEffect(() => {\n    setItemsLocalStorage(items);\n  }, [items]);\n\n  const onRemoveItem = useCallback((id) => {\n    setItems(prevItems => prevItems.filter(item => item.id !== id));\n  }, []);\n\n  const onChangeSearchValue = useCallback((value) => {\n    setSearchValue(value);\n  }, []);\n\n  const onSubmit = useCallback(async () => {\n    if (searchValue) {\n      const point = await searchPoint(searchValue);\n      if (point) {\n        setItems(prevItems => [\n          ...prevItems,\n          {\n            id: uuid(),\n            title: searchValue,\n            point\n          }\n        ]);\n        setSearchValue('');\n      }\n    }\n  }, [searchValue]);\n\n  const onChangeItemPoint = useCallback((id, point) => {\n    setItems(prevItems => prevItems.map(item => item.id === id ? {...item, point} : item));\n  }, []);\n\n  const onChangeActiveItem = useCallback((id) => setActiveItemId(id), []);\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  const onDragEnd = useCallback((result) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    setItems(prevItems => reorder(\n      prevItems,\n      result.source.index,\n      result.destination.index\n    ));\n  }, []);\n\n  return <div className=\"container mt-5\">\n    <div className=\"row\">\n      <div className=\"col-sm\">\n        <SearchForm value={searchValue} onChangeValue={onChangeSearchValue} onSubmit={onSubmit}/>\n        <List items={items} onRemove={onRemoveItem} onClick={onChangeActiveItem} onDragEnd={onDragEnd}/>\n      </div>\n      <div className=\"col-sm\">\n        <Map centerPoint={centerPoint} items={items} onChangeItemPoint={onChangeItemPoint}/>\n      </div>\n    </div>\n  </div>;\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'whatwg-fetch';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}